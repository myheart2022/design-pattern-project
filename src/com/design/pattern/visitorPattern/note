访问者模式是比较难以理解的，乍一看一头雾水，但理解之后就会发现它的精妙之处
访问者模式是一种将数据结构和数据操作分离的模式
假如有m种操作和n种数据类型，那么他们之间的操作种类就可能达到 m*n 种，如果使用if else来实现就是一种灾难
而使用访问者模式就可以降低这种复杂度
我们将操作类型抽象成Visitor接口，每个Visitor实现类都实现了对n种数据的操作，一共有m种实现类
这样我们就可以实现数据和操作的分别封装和分离（可以利用集合和循环来调用他们，非常方便）
优点体现了封装性和单一职责原则，对数据操作类的扩展性较好，
但对数据结构类的扩展性很差，也违反了依赖倒置原则
所以这种设计模式适用的场景应该是稳定的数据结构和易变的操作

下面贴一下前辈的总结：

我们要根据具体情况来评估是否适合使用访问者模式，例如，我们的对象结构是否足够稳定，
是否需要经常定义新的操作，使用访问者模式是否能优化我们的代码，而不是使我们的代码变得更复杂。

访问者模式的优点。

1.各角色职责分离，符合单一职责原则
  通过UML类图和上面的示例可以看出来，Visitor、ConcreteVisitor、Element 、ObjectStructure，职责单一，各司其责。
2.具有优秀的扩展性
  如果需要增加新的访问者，增加实现类 ConcreteVisitor 就可以快速扩展。
3.使得数据结构和作用于结构上的操作解耦，使得操作集合可以独立变化
  员工属性（数据结构）和CEO、CTO访问者（数据操作）的解耦。
4.灵活性

访问者模式的缺点。

1.具体元素对访问者公布细节，违反了迪米特原则
  CEO、CTO需要调用具体员工的方法。
2.具体元素变更时导致修改成本大
  变更员工属性时，多个访问者都要修改。
3.违反了依赖倒置原则，为了达到“区别对待”而依赖了具体类，没有以来抽象
  访问者 visit 方法中，依赖了具体员工的具体方法。

作者：JamFF
链接：https://www.jianshu.com/p/1f1049d0a0f4
来源：简书